class Solution {
    void quickSort(int[] arr) {
		//This can be solved using by Insertion Sort(day -2; we implemented , please do check)
		
		//TC : O(NlogN)          ; SC : O(N);
        int n = arr.length;
        qs(arr, 0, n - 1);
    }

    void qs(int arr[], int low, int high) {
        if (low < high) {
            int partitionIndex = makePartition(arr, low, high);
            qs(arr, low, partitionIndex - 1);
            qs(arr, partitionIndex + 1, high);
        }
    }

    int makePartition(int arr[], int low, int high) {
        int pivot = arr[low];
        int i = low + 1;
        int j = high;

        while (i <= j) {
            while (i <= high && arr[i] < pivot) {
                i++;
            }
            while (j >= low + 1 && arr[j] > pivot) {
                j--;
            }

            if (i <= j) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
                j--;
            }
        }

        // Swap pivot with the rightmost element smaller than the pivot
        int temp = arr[low];
        arr[low] = arr[j];
        arr[j] = temp;

        return j;
    }
}
